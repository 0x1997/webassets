Should bundle names be namespacable, similar to Django urls? At the least,
we probably want to encourage a convention of prefixing your bundle names
with an id. Everything else would just intend to make this easier or more
transparent; for example, bundles could be automatically namespaced based
on which app's assets.py file they are defined in, and the template tag
could look at request.current_app when resolving, or take an argument.
There should be some solution though, since it's easy to clash with names
like "js" or "js-all". "admin:js" works much nicer.

--parse-templates currently breaks on asset tags that refer to bundles
by name.

Allow callables that act as filters to be source filters.

Since running an external tool is not uncommon for a filter, the Filter
base class could support a helper function that simplifies the calls to
the subprocess module.

Our updates currently only consider the timestamps, not the assets settings;
that is, adding a new filter or file to a bundle will not cause it to be
recreated automatically.

Automatically create (and delete, i.e. manage) symlinks to make the
ASSETS_EXPIRE="filename" option work without server rewrites.

(a) Support functionality for applying a filter directly within a template,
i.e. pack inline scripts. (b) On the other end, allow piping an assets
directly into the template.

(c) Support a "apply filter but do not merge" mode in which every source
file is written to a corresponding file in a given output directory;
without having to explicitly create a separate bundle for each file. How
would this behave in a nested scenario?

With respect to (b) and (b), it will be challenging to support all those
combinations from within the Django template tag, with it's limited syntax.
Note that the two features do overlap: Both deal with how to output an
asset.

Should be provide features for normalizing encodings? This could be
added as properties to the bundles.

Handle far future expires for images: add a new templatetag that can output
image urls with timestamps; the cssrewrite filter could modify urls within
CSS files when ASSETS_EXPIRE is enabled.

Support image sprites like django-media-bundler does.

Find a good solution to making filter debug/log information available in a
standardized way across the board.

Allow an option to fall back to rendering source files in case asset
building fails for some reason. Right now, the user would get to see a
server error. This would probably most simply be accomplished by having
AssetsNode catch exceptions in create_merged() and redirect to
render_sources. We probably want to activate this only in production mode.

Support asset deployment to services like Amazon S3.

In the beginning, there was this idea of "tracking" assets in a model, to
avoid having to parse templates. Now that we conceptually moved towards
defining Bundles in code, that's no longer necessary. Still, there could
still be some uses for it; note enough probably to justify the feature, but
let's note them anyway:
	- The model could store things like the bundle hash, allowing a
	  hash-based update mechanism, even when using say a timestamp cache
	  buster, or no cache buster at all.
    - Right now, if asset properties like the applied filters or the list
      of source files change, without causing the source timestamp to
      change, the update will not be automatically picked up. That kind of
      information could be tracked and used to detect changes better.

Support more expiration/cache busting options (e.g. append hash, use hash
instead of filename, ...); Allow custom code as well.

Add support for Bundle subclasses to customize behavior on a
bundle-by-bundle basis:
	- The merging of filtersets.
    - Determining when an update is necessary.
    - How to expire assets
Basically, all the settings should be customizable this way, with the
settings themselves only serving as a default.

Currently, the docs claim that in a case like this:
	Bundle(filter='cssutils', ...),       # (1)
	Bundle(filter='less,cssutils', ...),  # (2)
	Bundle(filter='cssutils', ...),       # (3)
django-assets cannot apply those filters in two steps. Truth is, we're
just not smart enough; ``less`` COULD be applied first, and then cssutils
over the rest.

How do we currently handle something like this?
    less = Bundle('css/base.less', 'css/forms.less', filters='less',
                  output='gen/less.css',
                  debug=False)
    register('all-css', less, 'css/jquery.calendar.css',
             filters='yui_css', output="gen/all.css",
             debug="merge")   # <- !!!!
It seems like this should be a single file, but it probably isn't.

Provide a JSBundle, CSSBundle, AutoDetectBundle (for use in templates)
base classes which would provide a default set of filters; the idea is
to make starting with django-assets easier, but I'm not entirely
convinced it makes sense.
