There is currently no locking going during auto-rebuilds, that is multiple
requests could potentially cause multiple builds!

As much as I like the fact that one doesn't need to specify the filters to
use globally, the fact is that in many cases, the same set of filters is
going to be used, and for many simple cases, a set of default filters will
work really well and make things easy for new users. May something like this
could be added:
	 - env.default_filters['js'] == 'jsmin'
    - JSBundle('')
    - In templates, maybe: {% assets type="js" %}?

Add a switch to the rebuild() command to ignore the cache.

I keep coming back to this idea of having bundles that contain different
file types. For example, a jQueryUI bundle may reference both the JS and CSS
files of jQueryUI. Or, a form widget calendar widget could provide a bundle
with both the necessary JS and CSS files (this would allow things like
collecting all assets from all form widgets used to built the final bundle).
This would be much nicer than having to deal with separate bundles.
How would this be implemented?
    - The "contents" and "filters" attributes would become dicts:
      bundle.contents['js']
    - The template tags could: a) output the type ("js", "css") as a var; b)
      allow type="js" as an argument.
    - To maintain backwards-compatibility (and for convienience) the default
      Bundle() call would automatically separate the files based on
      extension. bundle.contents.js would expose only the JS files, while
      bundle.contents would continue to expose all. It would therefor be
      possible to continue while ignoring the new type-separation, so long
      as the Bundle only contains files of one type.
Question: What if a library wants to provide a separate CSS file for IE?

Should bundle names be namespacable, similar to Django urls? At the least,
we probably want to encourage a convention of prefixing your bundle names
with an id. Everything else would just intend to make this easier or more
transparent; for example, bundles could be automatically namespaced based
on which app's assets.py file they are defined in, and the template tag
could look at request.current_app when resolving, or take an argument.
There should be some solution though, since it's easy to clash with names
like "js" or "js-all". "admin:js" works much nicer.

Since running an external tool is not uncommon for a filter, the Filter
base class could support a helper function that simplifies the calls to
the subprocess module.

Our updates currently only consider the timestamps, not the assets settings;
that is, adding a new filter or file to a bundle will not cause it to be
recreated automatically.

Automatically create (and delete, i.e. manage) symlinks to make the
ASSETS_EXPIRE="filename" option work without server rewrites.

Support functionality for applying a filter directly within a template,
i.e. pack inline scripts. On the other end, allow piping an assets
directly into the template.

Should be provide features for normalizing encodings? This could be
added as properties to the bundles.

Handle far future expires for images: add a new templatetag that can output
image urls with timestamps; the cssrewrite filter could modify urls within
CSS files when ASSETS_EXPIRE is enabled.

Support image sprites like django-media-bundler does.

Find a good solution to making filter debug/log information available in a
standardized way across the board.

Allow an option to fall back to rendering source files in case asset
building fails for some reason. Right now, the user would get to see a
server error.

Support asset deployment to services like Amazon S3.

Support more expiration/cache busting options (e.g. append hash, use hash
instead of filename, ...); Allow custom code as well.

Add support for Bundle subclasses to customize behavior on a
bundle-by-bundle basis:
	- The merging of filtersets.
    - Determining when an update is necessary.
    - How to expire assets
Basically, all the settings should be customizable this way, with the
settings themselves only serving as a default.

Provide a JSBundle, CSSBundle, AutoDetectBundle (for use in templates)
base classes which would provide a default set of filters; the idea is
to make starting with django-assets easier, but I'm not entirely
convinced it makes sense.

Some filters, like the less filter, cannot work with an input stream,
but only with the source files directly. To work, they thus need to be
the first ones to be applied. There should be a way for filters to declare
that requirement and webassets to automatically validate it.
One possible option: Adding a new method besides input/output - say, "open()".
Only one such filter would be allowed to run.

I was never really happy with the debug=False approach to solving
the CSS compiler in debug mode problem. Maybe it should be up to
filters to decide if they need to run. There shouldn't really be
a case in which, say, "less" should NOT compile. The output wouldn't
be usable in the browser otherwise.

It might be possible to get rid of the ASSETS_JINJA2_EXTENSIONS setting,
or the requirement that the Jinja2Loader need to know about the extensions
used, if we can somehow hack Jinja2 to ignore unknown tags.